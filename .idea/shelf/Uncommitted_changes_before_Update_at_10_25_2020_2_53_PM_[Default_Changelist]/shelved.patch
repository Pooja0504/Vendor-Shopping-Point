Index: app/src/main/java/com/shopping_point/vendor_shopping_point/view/HomeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shopping_point.vendor_shopping_point.view;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.lifecycle.ViewModelProviders;\r\n\r\nimport android.Manifest;\r\nimport android.app.Dialog;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.util.Base64;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.Priority;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.bumptech.glide.request.RequestOptions;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.shopping_point.vendor_shopping_point.R;\r\nimport com.shopping_point.vendor_shopping_point.databinding.ActivityHomeBinding;\r\nimport com.shopping_point.vendor_shopping_point.receiver.NetworkChangeReceiver;\r\nimport com.shopping_point.vendor_shopping_point.storage.LoginUtils;\r\nimport com.shopping_point.vendor_shopping_point.utils.OnNetworkListener;\r\nimport com.shopping_point.vendor_shopping_point.utils.Slide;\r\nimport com.shopping_point.vendor_shopping_point.viewModel.UploadPhotoViewModel;\r\nimport com.shopping_point.vendor_shopping_point.viewModel.VendorImageViewModel;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\nimport de.hdodenhof.circleimageview.CircleImageView;\r\n\r\nimport static com.shopping_point.vendor_shopping_point.storage.LanguageUtils.loadLocale;\r\nimport static com.shopping_point.vendor_shopping_point.utils.Constant.CAMERA_PERMISSION_CODE;\r\nimport static com.shopping_point.vendor_shopping_point.utils.Constant.CAMERA_REQUEST;\r\nimport static com.shopping_point.vendor_shopping_point.utils.Constant.GALLERY_REQUEST;\r\nimport static com.shopping_point.vendor_shopping_point.utils.Constant.LOCALHOST;\r\nimport static com.shopping_point.vendor_shopping_point.utils.Constant.READ_EXTERNAL_STORAGE_CODE;\r\n\r\n\r\npublic class HomeActivity extends AppCompatActivity implements View.OnClickListener, NavigationView.OnNavigationItemSelectedListener, OnNetworkListener {\r\n\r\n    private static final String TAG = \"HomeActivity\";\r\n    private ActivityHomeBinding binding;\r\n    private Snackbar snack;\r\n    private NetworkChangeReceiver mNetworkReceiver;\r\n    private CircleImageView circleImageView,circleImageView2;\r\n    private Uri selectedImage;\r\n    private UploadPhotoViewModel uploadPhotoViewModel;\r\n    private VendorImageViewModel vendorImageViewModel;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        loadLocale(this);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_home);\r\n        binding.included.content.myproduct.setOnClickListener(this);\r\n        binding.included.content.addproduct.setOnClickListener(this);\r\n        binding.included.content.activateproduct.setOnClickListener(this);\r\n        binding.included.content.promotions.setOnClickListener(this);\r\n        uploadPhotoViewModel = ViewModelProviders.of(this).get(UploadPhotoViewModel.class);\r\n        vendorImageViewModel = ViewModelProviders.of(this).get(VendorImageViewModel.class);\r\n        snack = Snackbar.make(findViewById(android.R.id.content), getResources().getString(R.string.no_internet_connection), Snackbar.LENGTH_INDEFINITE);\r\n        setUpViews();\r\n        flipImages(Slide.getSlides());\r\n        getVendorImage();\r\n        \r\n        mNetworkReceiver = new NetworkChangeReceiver();\r\n        mNetworkReceiver.setOnNetworkListener(this);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    private void flipImages(ArrayList<Integer> images) {\r\n        for (int image : images) {\r\n            ImageView imageView = new ImageView(this);\r\n            imageView.setBackgroundResource(image);\r\n            binding.included.content.imageSlider.addView(imageView);\r\n\r\n        }\r\n\r\n        binding.included.content.imageSlider.setFlipInterval(2000);\r\n        binding.included.content.imageSlider.setAutoStart(true);\r\n\r\n        // Set the animation for the view that enters the screen\r\n        binding.included.content.imageSlider.setInAnimation(this, R.anim.slide_in_right);\r\n        // Set the animation for the view leaving th screen\r\n        binding.included.content.imageSlider.setOutAnimation(this, R.anim.slide_out_left);\r\n    }\r\n\r\n    private void setUpViews() {\r\n        Toolbar toolbar = binding.included.toolbar;\r\n        setSupportActionBar(toolbar);\r\n\r\n        DrawerLayout drawer = binding.drawerLayout;\r\n\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(\r\n                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);\r\n        drawer.addDrawerListener(toggle);\r\n        toggle.syncState();\r\n\r\n        binding.navView.setNavigationItemSelectedListener(this);\r\n\r\n\r\n\r\n        View headerContainer = binding.navView.getHeaderView(0);\r\n        circleImageView = headerContainer.findViewById(R.id.profilePic);\r\n        circleImageView2 = headerContainer.findViewById(R.id.plus);\r\n        circleImageView2.setOnClickListener(this);\r\n\r\n        TextView organisation_name = headerContainer.findViewById(R.id.nameOfVendor);\r\n        organisation_name.setText(LoginUtils.getInstance(this).getVendorInfo().getOrganisation_name());\r\n        TextView seller_mail = headerContainer.findViewById(R.id.email_of_vendor);\r\n        seller_mail.setText(LoginUtils.getInstance(this).getVendorInfo().getEmail());\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        switch (view.getId()) {\r\n            case R.id.plus:\r\n                showCustomAlertDialog();\r\n                break;\r\n            case R.id.myproduct:\r\n                Intent myproduct = new Intent(getApplicationContext(), MyProductActivity.class);\r\n                startActivity(myproduct);\r\n                break;\r\n            case R.id.addproduct:\r\n                Intent addproduct = new Intent(getApplicationContext(), AddProductActivity.class);\r\n                startActivity(addproduct);\r\n                break;\r\n            case R.id.activateproduct:\r\n                Intent activateproduct = new Intent(HomeActivity.this, ActivateProductActivity.class);\r\n                startActivity(activateproduct);\r\n                break;\r\n            case R.id.promotions:\r\n                Intent promotions = new Intent(HomeActivity.this, PromotionActivity.class);\r\n                startActivity(promotions);\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    private void showCustomAlertDialog() {\r\n        final Dialog dialog = new Dialog(HomeActivity.this);\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n        dialog.setContentView(R.layout.custom_image_dialog);\r\n\r\n        Button takePicture = dialog.findViewById(R.id.takePicture);\r\n        Button useGallery = dialog.findViewById(R.id.useGallery);\r\n\r\n        takePicture.setEnabled(true);\r\n        useGallery.setEnabled(true);\r\n\r\n        takePicture.setOnClickListener(v -> {\r\n            launchCamera();\r\n            dialog.cancel();\r\n        });\r\n\r\n        useGallery.setOnClickListener(v -> {\r\n            getImageFromGallery();\r\n            dialog.cancel();\r\n        });\r\n\r\n        dialog.show();\r\n    }\r\n\r\n    private void getImageFromGallery() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            if (HomeActivity.this.checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED &&\r\n                    ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\n                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, READ_EXTERNAL_STORAGE_CODE);\r\n            } else {\r\n                try {\r\n                    Intent getIntent = new Intent(Intent.ACTION_GET_CONTENT);\r\n                    getIntent.setType(\"image/*\");\r\n\r\n                    Intent pickIntent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\r\n\r\n                    Intent chooserIntent = Intent.createChooser(getIntent, \"Select Image\");\r\n                    chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, new Intent[]{pickIntent});\r\n\r\n                    startActivityForResult(chooserIntent, GALLERY_REQUEST);\r\n                } catch (Exception exp) {\r\n                    Log.i(\"Error\", exp.toString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void launchCamera() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            if (checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\r\n                requestPermissions(new String[]{Manifest.permission.CAMERA}, CAMERA_PERMISSION_CODE);\r\n            } else {\r\n                Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n                startActivityForResult(cameraIntent, CAMERA_REQUEST);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        Uri path = data.getData();\r\n        Bitmap bitmap = null;\r\n        if (requestCode == GALLERY_REQUEST && resultCode == RESULT_OK) {\r\n\r\n\r\n            try {\r\n                bitmap = MediaStore.Images.Media.getBitmap(getApplication().getContentResolver(), path);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            selectedImage = data.getData();\r\n            circleImageView.setImageURI(selectedImage);\r\n\r\n            int id = LoginUtils.getInstance(this).getVendorInfo().getId();\r\n            String encodephoto = imageToString(bitmap);\r\n\r\n\r\n            uploadPhoto(encodephoto,id);\r\n\r\n        } else if (requestCode == CAMERA_REQUEST && resultCode == RESULT_OK) {\r\n            Bitmap photo = (Bitmap) data.getExtras().get(\"data\");\r\n            circleImageView.setImageBitmap(photo);\r\n            int id = LoginUtils.getInstance(this).getVendorInfo().getId();\r\n            String encodePhoto = imageToString(photo);\r\n            uploadPhoto(encodePhoto,id);\r\n\r\n        }\r\n    }\r\n    private String imageToString(Bitmap bitmap)\r\n    {\r\n        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\r\n        bitmap.compress(Bitmap.CompressFormat.JPEG,100,byteArrayOutputStream);\r\n        byte[] imgByte = byteArrayOutputStream.toByteArray();\r\n        return Base64.encodeToString(imgByte,Base64.DEFAULT);\r\n    }\r\n\r\n    private void uploadPhoto(String photo,int id) {\r\n        uploadPhotoViewModel.uploadPhoto(photo,id).observe(this, responseBody -> {\r\n            //Toast.makeText(this, \"Image Uploaded\", Toast.LENGTH_SHORT).show();\r\n        });\r\n    }\r\n\r\n\r\n    private void getVendorImage() {\r\n        vendorImageViewModel.getVendorImage(LoginUtils.getInstance(this).getVendorInfo().getId()).observe(this, response -> {\r\n            if (response != null) {\r\n                String imageUrl = response.getImage().replaceAll(\"\\\\\\\\\", \"/\");\r\n                //Toast.makeText(this, imageUrl, Toast.LENGTH_SHORT).show();\r\n                Log.d(TAG, \"GET USER IMAGE : \" + imageUrl);\r\n                RequestOptions options = new RequestOptions()\r\n                        .centerCrop()\r\n                        .placeholder(R.drawable.profile_picture)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL)\r\n                        .priority(Priority.HIGH)\r\n                        .dontAnimate()\r\n                        .dontTransform();\r\n\r\n                Glide.with(getApplicationContext())\r\n                        .load(imageUrl)\r\n                        .apply(options)\r\n                        .into(circleImageView);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n        int id = menuItem.getItemId();\r\n\r\n       if (id == R.id.nav_myAccount) {\r\n            Intent accountIntent = new Intent(this, AccountActivity.class);\r\n            startActivity(accountIntent);\r\n        } else if (id == R.id.nav_newsFeed) {\r\n            Intent newsFeedIntent = new Intent(this, NewsFeedActivity.class);\r\n            startActivity(newsFeedIntent);\r\n        }else if (id == R.id.nav_settings) {\r\n           Intent navsetting = new Intent(this, NavSettings.class);\r\n           startActivity(navsetting);\r\n       }else if (id == R.id.nav_notification) {\r\n           Intent NavNotification = new Intent(this, NavNotification.class);\r\n           startActivity(NavNotification);\r\n       }\r\n        DrawerLayout drawer = findViewById(R.id.drawer_layout);\r\n        drawer.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n\r\n    public void showSnackBar() {\r\n        snack.getView().setBackgroundColor(ContextCompat.getColor(this, R.color.red));\r\n        snack.show();\r\n    }\r\n\r\n    public void hideSnackBar() {\r\n        snack.dismiss();\r\n    }\r\n\r\n    private void registerNetworkBroadcastForNougat() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            registerReceiver(mNetworkReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        registerNetworkBroadcastForNougat();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        unregisterReceiver(mNetworkReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onNetworkConnected() {\r\n        hideSnackBar();\r\n    }\r\n\r\n    @Override\r\n    public void onNetworkDisconnected() {\r\n        showSnackBar();\r\n    }\r\n    @Override\r\n    public void onBackPressed() {\r\n        DrawerLayout drawer = findViewById(R.id.drawer_layout);\r\n        if (drawer.isDrawerOpen(GravityCompat.START)) {\r\n            drawer.closeDrawer(GravityCompat.START);\r\n        } else {\r\n            closeApplication();\r\n        }\r\n    }\r\n    private void closeApplication() {\r\n        AlertDialog alertDialog = new AlertDialog.Builder(this)\r\n                .setIcon(android.R.drawable.ic_dialog_alert)\r\n                .setMessage(R.string.want_to_exit)\r\n                .setPositiveButton(R.string.ok, (dialog, which) -> finish())\r\n                .setNegativeButton(R.string.cancel, null)\r\n                .show();\r\n\r\n        alertDialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(getResources().getColor(R.color.darkGreen));\r\n        alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(getResources().getColor(R.color.darkGreen));\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/shopping_point/vendor_shopping_point/view/HomeActivity.java	(revision a8635f09e74656f01e492b1ca78c8b827f637797)
+++ app/src/main/java/com/shopping_point/vendor_shopping_point/view/HomeActivity.java	(date 1603610845725)
@@ -127,9 +127,6 @@
         toggle.syncState();
 
         binding.navView.setNavigationItemSelectedListener(this);
-
-
-
         View headerContainer = binding.navView.getHeaderView(0);
         circleImageView = headerContainer.findViewById(R.id.profilePic);
         circleImageView2 = headerContainer.findViewById(R.id.plus);
@@ -202,10 +199,10 @@
                     Intent getIntent = new Intent(Intent.ACTION_GET_CONTENT);
                     getIntent.setType("image/*");
 
-                    Intent pickIntent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
+
 
                     Intent chooserIntent = Intent.createChooser(getIntent, "Select Image");
-                    chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, new Intent[]{pickIntent});
+
 
                     startActivityForResult(chooserIntent, GALLERY_REQUEST);
                 } catch (Exception exp) {
@@ -241,13 +238,13 @@
                 e.printStackTrace();
             }
 
-            selectedImage = data.getData();
-            circleImageView.setImageURI(selectedImage);
+            ///selectedImage = data.getData();
+            circleImageView.setImageBitmap(bitmap);
 
             int id = LoginUtils.getInstance(this).getVendorInfo().getId();
             String encodephoto = imageToString(bitmap);
 
-
+            Toast.makeText(this, "BEFORE UPLOADING PHOTO", Toast.LENGTH_SHORT).show();
             uploadPhoto(encodephoto,id);
 
         } else if (requestCode == CAMERA_REQUEST && resultCode == RESULT_OK) {
@@ -255,6 +252,7 @@
             circleImageView.setImageBitmap(photo);
             int id = LoginUtils.getInstance(this).getVendorInfo().getId();
             String encodePhoto = imageToString(photo);
+            Toast.makeText(this, encodePhoto, Toast.LENGTH_SHORT).show();
             uploadPhoto(encodePhoto,id);
 
         }
@@ -267,9 +265,28 @@
         return Base64.encodeToString(imgByte,Base64.DEFAULT);
     }
 
+
+
+
+
+
+
+
+
+
     private void uploadPhoto(String photo,int id) {
+        Toast.makeText(this, photo, Toast.LENGTH_SHORT).show();
+        Toast.makeText(this, "in Upload photo method ", Toast.LENGTH_SHORT).show();
         uploadPhotoViewModel.uploadPhoto(photo,id).observe(this, responseBody -> {
-            //Toast.makeText(this, "Image Uploaded", Toast.LENGTH_SHORT).show();
+            Log.d(TAG, "onResponse: before" );
+            if(responseBody!= null) {
+                Log.d(TAG, "onResponse: Photo uploaded succesfully" );
+              //  Toast.makeText(this, "Image Uploaded", Toast.LENGTH_SHORT).show();
+            }else
+            {
+               // Toast.makeText(this, "Failedddddddddddddddddddddddddddddddddddddd", Toast.LENGTH_SHORT).show();
+                Log.d(TAG, "onResponse: Photo Failed" );
+            }
         });
     }
 
@@ -278,7 +295,7 @@
         vendorImageViewModel.getVendorImage(LoginUtils.getInstance(this).getVendorInfo().getId()).observe(this, response -> {
             if (response != null) {
                 String imageUrl = response.getImage().replaceAll("\\\\", "/");
-                //Toast.makeText(this, imageUrl, Toast.LENGTH_SHORT).show();
+                Toast.makeText(this, imageUrl, Toast.LENGTH_SHORT).show();
                 Log.d(TAG, "GET USER IMAGE : " + imageUrl);
                 RequestOptions options = new RequestOptions()
                         .centerCrop()
Index: app/src/main/java/com/shopping_point/vendor_shopping_point/net/Api.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shopping_point.vendor_shopping_point.net;\r\n\r\n\r\nimport com.shopping_point.vendor_shopping_point.model.AddProductApiResponse;\r\nimport com.shopping_point.vendor_shopping_point.model.Image;\r\nimport com.shopping_point.vendor_shopping_point.model.LoginApiResponse;\r\nimport com.shopping_point.vendor_shopping_point.model.MyProductResponse;\r\nimport com.shopping_point.vendor_shopping_point.model.NewsFeedResponse;\r\nimport com.shopping_point.vendor_shopping_point.model.Otp;\r\nimport com.shopping_point.vendor_shopping_point.model.Product;\r\nimport com.shopping_point.vendor_shopping_point.model.RegisterApiResponse;\r\nimport com.shopping_point.vendor_shopping_point.model.Vendor;\r\n\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport okhttp3.ResponseBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.http.Body;\r\nimport retrofit2.http.DELETE;\r\nimport retrofit2.http.GET;\r\nimport retrofit2.http.Multipart;\r\nimport retrofit2.http.POST;\r\nimport retrofit2.http.Part;\r\nimport retrofit2.http.Query;\r\n\r\npublic interface Api {\r\n\r\n    @POST(\"vendor/vendor_register.php\")\r\n    Call<RegisterApiResponse> createVendor(@Body Vendor vendor);\r\n\r\n    @GET(\"vendor/vendor_login.php\")\r\n    Call<LoginApiResponse> logInVendor(@Query(\"email\") String email, @Query(\"password\") String password);\r\n\r\n    @GET(\"vendor/deleteuser.php\")\r\n    Call<ResponseBody> deleteAccount(@Query(\"userId\") int userId);\r\n\r\n    @Multipart\r\n    @POST(\"vendor/upload.php\")\r\n    Call<ResponseBody> uploadPhoto(@Query(\"image\") String image, @Query(\"id\") int id);\r\n\r\n    @DELETE(\"history/remove.php\")\r\n    Call<ResponseBody> removeAllFromHistory();\r\n\r\n    @GET(\"vendor/getImage.php\")\r\n    Call<Image> getUserImage(@Query(\"id\") int vendorId);\r\n\r\n    @GET(\"vendor/info.php\")\r\n    Call<ResponseBody> updatePassword(@Query(\"password\") String newPassword, @Query(\"email\") String email);\r\n\r\n    @GET(\"users/otp.php\")\r\n    Call<Otp> getOtp(@Query(\"email\") String email);\r\n\r\n    @GET(\"posters/getPosters.php\")\r\n    Call<NewsFeedResponse> getPosters();\r\n\r\n    @POST(\"vendor/addProduct.php\")\r\n    Call<AddProductApiResponse> createProduct(@Body Product product);\r\n\r\n    @GET(\"vendor/get_product.php\")\r\n    Call<MyProductResponse> getMyproduct(@Query(\"id\")int seller_id);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/shopping_point/vendor_shopping_point/net/Api.java	(revision a8635f09e74656f01e492b1ca78c8b827f637797)
+++ app/src/main/java/com/shopping_point/vendor_shopping_point/net/Api.java	(date 1603562444702)
@@ -11,16 +11,12 @@
 import com.shopping_point.vendor_shopping_point.model.RegisterApiResponse;
 import com.shopping_point.vendor_shopping_point.model.Vendor;
 
-import okhttp3.MultipartBody;
-import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
 import retrofit2.Call;
 import retrofit2.http.Body;
 import retrofit2.http.DELETE;
 import retrofit2.http.GET;
-import retrofit2.http.Multipart;
 import retrofit2.http.POST;
-import retrofit2.http.Part;
 import retrofit2.http.Query;
 
 public interface Api {
@@ -34,8 +30,8 @@
     @GET("vendor/deleteuser.php")
     Call<ResponseBody> deleteAccount(@Query("userId") int userId);
 
-    @Multipart
-    @POST("vendor/upload.php")
+
+    @GET("vendor/upload.php")
     Call<ResponseBody> uploadPhoto(@Query("image") String image, @Query("id") int id);
 
     @DELETE("history/remove.php")
Index: app/src/main/java/com/shopping_point/vendor_shopping_point/view/AccountActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shopping_point.vendor_shopping_point.view;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.lifecycle.ViewModelProviders;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.Priority;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.bumptech.glide.request.RequestOptions;\r\nimport com.shopping_point.vendor_shopping_point.R;\r\nimport com.shopping_point.vendor_shopping_point.databinding.ActivityAccountBinding;\r\nimport com.shopping_point.vendor_shopping_point.storage.LoginUtils;\r\nimport com.shopping_point.vendor_shopping_point.viewModel.DeleteUserViewModel;\r\nimport com.shopping_point.vendor_shopping_point.viewModel.FromHistoryViewModel;\r\nimport com.shopping_point.vendor_shopping_point.viewModel.VendorImageViewModel;\r\n\r\n\r\nimport java.io.IOException;\r\n\r\nimport de.hdodenhof.circleimageview.CircleImageView;\r\n\r\nimport static com.shopping_point.vendor_shopping_point.storage.LanguageUtils.getEnglishState;\r\nimport static com.shopping_point.vendor_shopping_point.storage.LanguageUtils.loadLocale;\r\nimport static com.shopping_point.vendor_shopping_point.storage.LanguageUtils.setEnglishState;\r\nimport static com.shopping_point.vendor_shopping_point.storage.LanguageUtils.setLocale;\r\nimport static com.shopping_point.vendor_shopping_point.utils.Constant.LOCALHOST;\r\n\r\n\r\npublic class AccountActivity extends AppCompatActivity implements View.OnClickListener {\r\n\r\n    private static final String TAG = \"AccountActivity\";\r\n    private DeleteUserViewModel deleteUserViewModel;\r\n    private FromHistoryViewModel fromHistoryViewModel;\r\n    public static boolean historyIsDeleted = false;\r\n    private VendorImageViewModel vendorImageViewModel;\r\n    private CircleImageView circleImageView;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        loadLocale(this);\r\n        ActivityAccountBinding binding = DataBindingUtil.setContentView(this, R.layout.activity_account);\r\n\r\n        ActionBar actionBar = getSupportActionBar();\r\n        actionBar.setTitle(getResources().getString(R.string.my_account));\r\n\r\n        deleteUserViewModel = ViewModelProviders.of(this).get(DeleteUserViewModel.class);\r\n        fromHistoryViewModel = ViewModelProviders.of(this).get(FromHistoryViewModel.class);\r\n        vendorImageViewModel = ViewModelProviders.of(this).get(VendorImageViewModel.class);\r\n\r\n        binding.nameOfVendor.setText(LoginUtils.getInstance(this).getVendorInfo().getOrganisation_name());\r\n        binding.emailOfVendor.setText(LoginUtils.getInstance(this).getVendorInfo().getEmail());\r\n        getVendorImage();\r\n        View headerContainer = binding.profileImageAccount.getRootView();\r\n        circleImageView = headerContainer.findViewById(R.id.profile_image_account);\r\n\r\n        binding.languages.setOnClickListener(this);\r\n        binding.helpCenter.setOnClickListener(this);\r\n\r\n        binding.changePassword.setOnClickListener(this);\r\n        binding.deleteAccount.setOnClickListener(this);\r\n    }\r\n\r\n    \r\n    private void getVendorImage() {\r\n        vendorImageViewModel.getVendorImage(LoginUtils.getInstance(this).getVendorInfo().getId()).observe(this, response -> {\r\n            if (response != null) {\r\n                String imageUrl = LOCALHOST + response.getImage().replaceAll(\"\\\\\\\\\", \"/\");\r\n\r\n                RequestOptions options = new RequestOptions()\r\n                        .centerCrop()\r\n                        .placeholder(R.drawable.profile_picture)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL)\r\n                        .priority(Priority.HIGH)\r\n                        .dontAnimate()\r\n                        .dontTransform();\r\n\r\n                Glide.with(getApplicationContext())\r\n                        .load(imageUrl)\r\n                        .apply(options)\r\n                        .into(circleImageView);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.account, menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        if (item.getItemId() == R.id.action_signOut) {\r\n            signOut();\r\n            deleteAllProductsInHistory();\r\n            return true;\r\n        }\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    private void signOut() {\r\n        LoginUtils.getInstance(this).clearAll();\r\n        Intent intent = new Intent(this, LoginActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void deleteAllProductsInHistory() {\r\n        fromHistoryViewModel.removeAllFromHistory().observe(this, responseBody -> {\r\n            Log.d(TAG,getString(R.string.all_removed));\r\n        });\r\n        historyIsDeleted = true;\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        switch (view.getId()) {\r\n\r\n            case R.id.languages:\r\n                showCustomAlertDialog();\r\n                break;\r\n            case R.id.helpCenter:\r\n                Intent helpCenterIntent = new Intent(this, HelpActivity.class);\r\n                startActivity(helpCenterIntent);\r\n                break;\r\n            case R.id.changePassword:\r\n                Intent passwordIntent = new Intent(this, PasswordActivity.class);\r\n                startActivity(passwordIntent);\r\n                break;\r\n            case R.id.deleteAccount:\r\n                deleteAccount();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void deleteAccount() {\r\n        deleteUserViewModel.deleteUser(LoginUtils.getInstance(this).getVendorInfo().getId()).observe(this, responseBody -> {\r\n            if(responseBody!= null){\r\n                LoginUtils.getInstance(getApplicationContext()).clearAll();\r\n                try {\r\n                  //  Toast.makeText(AccountActivity.this, responseBody.string() + \"\", Toast.LENGTH_SHORT).show();\r\n                    Log.d(TAG, \"onResponse: delete account\" + responseBody.string());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                goToLoginActivity();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void goToLoginActivity() {\r\n        Intent intent = new Intent(this, LoginActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void showCustomAlertDialog() {\r\n        final Dialog dialog = new Dialog(AccountActivity.this);\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n        dialog.setContentView(R.layout.custom_language_dialog);\r\n\r\n        Button english = dialog.findViewById(R.id.txtEnglish);\r\n        Button hindi = dialog.findViewById(R.id.txtHindi);\r\n\r\n        if(getEnglishState(this)){\r\n            english.setEnabled(false);\r\n            english.setAlpha(.5f);\r\n            hindi.setEnabled(true);\r\n        }else {\r\n            hindi.setEnabled(false);\r\n            hindi.setAlpha(.5f);\r\n            english.setEnabled(true);\r\n        }\r\n\r\n        english.setOnClickListener(v -> {\r\n            english.setEnabled(true);\r\n            chooseEnglish();\r\n            dialog.cancel();\r\n        });\r\n\r\n        hindi.setOnClickListener(v -> {\r\n            hindi.setEnabled(true);\r\n            chooseHindi();\r\n            dialog.cancel();\r\n        });\r\n\r\n        dialog.show();\r\n    }\r\n\r\n    private void chooseEnglish() {\r\n        setLocale(this,\"en\");\r\n        recreate();\r\n       // Toast.makeText(this, \"English\", Toast.LENGTH_SHORT).show();\r\n        setEnglishState(this, true);\r\n    }\r\n\r\n    private void chooseHindi() {\r\n        setLocale(this,\"hi\");\r\n        recreate();\r\n       // Toast.makeText(this, \"Hindi\", Toast.LENGTH_SHORT).show();\r\n        setEnglishState(this, false);\r\n    }\r\n    @Override\r\n    public void onBackPressed() {\r\n        return;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/shopping_point/vendor_shopping_point/view/AccountActivity.java	(revision a8635f09e74656f01e492b1ca78c8b827f637797)
+++ app/src/main/java/com/shopping_point/vendor_shopping_point/view/AccountActivity.java	(date 1603559797069)
@@ -77,7 +77,7 @@
     private void getVendorImage() {
         vendorImageViewModel.getVendorImage(LoginUtils.getInstance(this).getVendorInfo().getId()).observe(this, response -> {
             if (response != null) {
-                String imageUrl = LOCALHOST + response.getImage().replaceAll("\\\\", "/");
+                String imageUrl =  response.getImage().replaceAll("\\\\", "/");
 
                 RequestOptions options = new RequestOptions()
                         .centerCrop()
Index: app/src/main/java/com/shopping_point/vendor_shopping_point/repository/UploadPhotoRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shopping_point.vendor_shopping_point.repository;\r\n\r\nimport android.app.Application;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\n\r\nimport com.shopping_point.vendor_shopping_point.net.RetrofitClient;\r\nimport com.shopping_point.vendor_shopping_point.storage.LoginUtils;\r\n\r\nimport java.io.File;\r\n\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport okhttp3.ResponseBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class UploadPhotoRepository {\r\n\r\n    private static final String TAG = UploadPhotoRepository.class.getSimpleName();\r\n    private Application application;\r\n\r\n    public UploadPhotoRepository(Application application) {\r\n        this.application = application;\r\n    }\r\n\r\n    public LiveData<ResponseBody> uploadPhoto(String photo, int id) {\r\n        final MutableLiveData<ResponseBody> mutableLiveData = new MutableLiveData<>();\r\n\r\n        RetrofitClient.getInstance().getApi().uploadPhoto(photo, id).enqueue(new Callback<ResponseBody>() {\r\n            @Override\r\n            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                Log.d(TAG, \"onResponse: \" + \"Image Updated\");\r\n                Toast.makeText(application, \"SUCESS : IMAGE UPLOADED \", Toast.LENGTH_SHORT).show();\r\n                ResponseBody responseBody = response.body();\r\n\r\n                if (response.body() != null) {\r\n                    mutableLiveData.setValue(responseBody);\r\n                    Toast.makeText(application, \"IN RESPONSE BODY\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<ResponseBody> call, Throwable t) {\r\n                Log.d(TAG, \"onFailure: \" + t.getMessage());\r\n               // Toast.makeText(application, \"FAILED \" + t.getMessage() , Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n        return mutableLiveData;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/shopping_point/vendor_shopping_point/repository/UploadPhotoRepository.java	(revision a8635f09e74656f01e492b1ca78c8b827f637797)
+++ app/src/main/java/com/shopping_point/vendor_shopping_point/repository/UploadPhotoRepository.java	(date 1603563214715)
@@ -4,18 +4,14 @@
 import android.util.Log;
 import android.widget.Toast;
 
+
 import androidx.lifecycle.LiveData;
 import androidx.lifecycle.MutableLiveData;
 
 
 import com.shopping_point.vendor_shopping_point.net.RetrofitClient;
-import com.shopping_point.vendor_shopping_point.storage.LoginUtils;
 
-import java.io.File;
 
-import okhttp3.MediaType;
-import okhttp3.MultipartBody;
-import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
 import retrofit2.Call;
 import retrofit2.Callback;
@@ -30,26 +26,23 @@
         this.application = application;
     }
 
-    public LiveData<ResponseBody> uploadPhoto(String photo, int id) {
+    public LiveData<ResponseBody> uploadPhoto(String image,int id) {
         final MutableLiveData<ResponseBody> mutableLiveData = new MutableLiveData<>();
-
-        RetrofitClient.getInstance().getApi().uploadPhoto(photo, id).enqueue(new Callback<ResponseBody>() {
+        RetrofitClient.getInstance().getApi().uploadPhoto(image,id).enqueue(new Callback<ResponseBody>() {
             @Override
             public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
-                Log.d(TAG, "onResponse: " + "Image Updated");
-                Toast.makeText(application, "SUCESS : IMAGE UPLOADED ", Toast.LENGTH_SHORT).show();
+                Log.d(TAG, "onResponse Upload User : without checking response");
+              //  Toast.makeText(application, response.body().toString(), Toast.LENGTH_SHORT).show();
                 ResponseBody responseBody = response.body();
-
                 if (response.body() != null) {
+                    Log.d(TAG, "onResponse Upload User image: Succeeded");
                     mutableLiveData.setValue(responseBody);
-                    Toast.makeText(application, "IN RESPONSE BODY", Toast.LENGTH_SHORT).show();
                 }
             }
 
             @Override
             public void onFailure(Call<ResponseBody> call, Throwable t) {
-                Log.d(TAG, "onFailure: " + t.getMessage());
-               // Toast.makeText(application, "FAILED " + t.getMessage() , Toast.LENGTH_SHORT).show();
+                Log.d(TAG, "onFailure Upload User image : " + t.getMessage());
             }
         });
 
Index: app/src/main/java/com/shopping_point/vendor_shopping_point/repository/DeleteUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shopping_point.vendor_shopping_point.repository;\r\n\r\nimport android.app.Application;\r\nimport android.util.Log;\r\n\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\n\r\nimport com.shopping_point.vendor_shopping_point.net.RetrofitClient;\r\n\r\nimport okhttp3.ResponseBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class DeleteUserRepository {\r\n\r\n    private static final String TAG = DeleteUserRepository.class.getSimpleName();\r\n    private Application application;\r\n\r\n    public DeleteUserRepository(Application application) {\r\n        this.application = application;\r\n    }\r\n\r\n    public LiveData<ResponseBody> deleteUser(int userId) {\r\n        final MutableLiveData<ResponseBody> mutableLiveData = new MutableLiveData<>();\r\n        RetrofitClient.getInstance().getApi().deleteAccount(userId).enqueue(new Callback<ResponseBody>() {\r\n            @Override\r\n            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\r\n                Log.d(TAG, \"onResponse Delete User: Succeeded\");\r\n                ResponseBody responseBody = response.body();\r\n                if (response.body() != null) {\r\n                    mutableLiveData.setValue(responseBody);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<ResponseBody> call, Throwable t) {\r\n                Log.d(TAG, \"onFailure Delete User : \" + t.getMessage());\r\n            }\r\n        });\r\n\r\n        return mutableLiveData;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/shopping_point/vendor_shopping_point/repository/DeleteUserRepository.java	(revision a8635f09e74656f01e492b1ca78c8b827f637797)
+++ app/src/main/java/com/shopping_point/vendor_shopping_point/repository/DeleteUserRepository.java	(date 1603563297865)
@@ -28,9 +28,10 @@
         RetrofitClient.getInstance().getApi().deleteAccount(userId).enqueue(new Callback<ResponseBody>() {
             @Override
             public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
-                Log.d(TAG, "onResponse Delete User: Succeeded");
+                Log.d(TAG, "onResponse Delete User: before");
                 ResponseBody responseBody = response.body();
                 if (response.body() != null) {
+                    Log.d(TAG, "onResponse Delete User: Succeeded");
                     mutableLiveData.setValue(responseBody);
                 }
             }
Index: app/src/main/java/com/shopping_point/vendor_shopping_point/viewModel/UploadPhotoViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shopping_point.vendor_shopping_point.viewModel;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.lifecycle.AndroidViewModel;\r\nimport androidx.lifecycle.LiveData;\r\n\r\n\r\nimport com.shopping_point.vendor_shopping_point.repository.UploadPhotoRepository;\r\n\r\nimport okhttp3.ResponseBody;\r\n\r\npublic class UploadPhotoViewModel extends AndroidViewModel {\r\n\r\n    private UploadPhotoRepository uploadPhotoRepository;\r\n\r\n    public UploadPhotoViewModel(@NonNull Application application) {\r\n        super(application);\r\n        uploadPhotoRepository = new UploadPhotoRepository(application);\r\n    }\r\n\r\n    public LiveData<ResponseBody> uploadPhoto(String photo,int id) {\r\n        return uploadPhotoRepository.uploadPhoto(photo,id);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/shopping_point/vendor_shopping_point/viewModel/UploadPhotoViewModel.java	(revision a8635f09e74656f01e492b1ca78c8b827f637797)
+++ app/src/main/java/com/shopping_point/vendor_shopping_point/viewModel/UploadPhotoViewModel.java	(date 1603562444684)
@@ -20,7 +20,7 @@
         uploadPhotoRepository = new UploadPhotoRepository(application);
     }
 
-    public LiveData<ResponseBody> uploadPhoto(String photo,int id) {
+    public LiveData<ResponseBody> uploadPhoto(String photo, int id) {
         return uploadPhotoRepository.uploadPhoto(photo,id);
     }
 }
